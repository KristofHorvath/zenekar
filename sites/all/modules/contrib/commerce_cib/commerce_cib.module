<?php

/**
 * @file
 * Commerce Payment method for CIB bank.
 */

// Default value for transaction timeouts in seconds.
define('COMMERCE_CIB_TIMEOUT', 700);

/**
 * Implements hook_menu().
 */
function commerce_cib_menu() {
  $items['commerce_cib_finish/%commerce_order/%'] = array(
    'page callback' => 'commerce_cib_finish_step',
    'page arguments' => array(1,2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access checkout'),
  );
  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_cib_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['cib'] = array(
    'base' => 'commerce_cib',
    'title' => t('CIB bank'),
    'short_title' => t('CIB'),
    'display_title' => t('CIB bank'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'description' => t('Integrates with CIB bank payment service.'),
  );
  return $payment_methods;
}

/**
 * Implements hook_theme().
 */
function commerce_cib_theme() {
  return array(
    'commerce_cib_finish' => array(
      'variables' => array(
        'messages' => NULL,
      ),
    ),
  );
}

/**
 * Returns the default settings for the CIB payment method.
 */
function commerce_cib_default_settings() {
  return array(
    'pid' => '',
    'cur' => 'HUF',
    'env' => 'testing',
    'des' => '',
  );
}

function commerce_cib_settings_form($settings = array()) {
  $settings = (array) $settings + commerce_cib_default_settings();

  $form = array();
  $form['pid'] = array(
    '#type' => 'textfield',
    '#title' => t('CIB Shop ID'),
    '#description' => t('The shop ID received from CIB in email. Has the format "ABC0001".'),
    '#default_value' => $settings['pid'],
    '#required' => TRUE,
  );

  $form['cur'] = array(
    '#type' => 'radios',
    '#title' => t('Currency'),
    '#description' => t('The currency of the payment.'),
    '#options' => array(
      'EUR' => 'EUR',
      'HUF' => 'HUF',
    ),
    '#default_value' => $settings['cur'],
    '#required' => TRUE,
  );

  $form['env'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#options' => array(
      'testing' => t('Testing'),
      'live' => t('Live')
    ),
    '#default_value' => $settings['env'],
    '#required' => TRUE,
  );

  $form['des'] = array(
    '#type' => 'textfield',
    '#title' => t('Keyfile path'),
    '#description' => t('The absolute path of the des keyfile used for encryption.'),
    '#default_value' => $settings['des'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback; generation callback for the payment redirect form.
 */
function commerce_cib_redirect_form($form, &$form_state, $order, $payment_method) {
  $amo = field_get_items('commerce_order', $order, 'commerce_order_total');
  $amo = $amo[0]['amount'];

  // Identify eki user based on email.
  $eki_user = db_select('commerce_cib_transactions', 'cct')
  ->fields('cct', array('eki_user'))
  ->condition('cct.email', $order->mail)
  ->execute()
  ->fetchField();
  if (empty($eki_user)) {
    $last_eki_user = db_select('commerce_cib_transactions', 'cct')
    ->fields('cct', array('eki_user'))
    ->orderBy('cct.eki_user', 'DESC')
    ->execute()
    ->fetchField();
    if (empty($last_eki_user)) {
      $no = 1;
    }
    else {
      $no = substr($last_eki_user, 3) + 1;
    }
    $eki_user = 'MEZ' . str_pad($no, 8, '0', STR_PAD_LEFT);
  }
  $payment_instance = explode('|', $payment_method['instance_id']);

  $initialized = FALSE;
  $tries = 0;


  while (!$initialized && $tries++ < 10) {
    $trid = date("is", time());
    for ($i=1; $i <= 12; $i++) {
      $trid .= rand(1,9);
    }

    // Let's initialize the transaction
    $query10 = array(
      'CRYPTO' => 1,
      'MSGT' => 10,
      'TRID' => $trid,
      'UID' => $eki_user,
      'LANG' => 'HU',
      'TS' => date("YmdHis", time()),
      'AUTH' => 0,
      'AMO' => $amo,
      'CUR' => $payment_method['settings']['cur'],
      'URL' => 'http://' . $_SERVER['SERVER_NAME'] . '/commerce_cib_finish/' . $order->order_id . '/' . $payment_instance[1],
      'PID' => $payment_method['settings']['pid'],
    );
    $url = commerce_cib_create_url($query10, $payment_method['settings']);
    $answer = drupal_http_request($url);
    if ($answer->code == 200) {
      $cleartext2 = ekiDecodeUrl($answer->data, $payment_method['settings']['des']);
      parse_str($cleartext2, $query);
      if ($query['RC'] == '00') {
        $initialized = TRUE;
      }
    }
  }

  if ($initialized) {
     $record = array(
      'order_id' => $order->order_id,
      'email' => $order->mail,
      'eki_user' => $eki_user,
      'trid' => $trid,
      'amount' => $amo,
      'currency' => $payment_method['settings']['cur'],
      'msgt' => 20,
      'rc' => '',
      'rt' => '',
      'anum' => '',
      'start' => time(),
      'end' => 0,
      'history' => '',
    );
    commerce_cib_save_transaction($record, 'insert');
    $query20 = array(
      'MSGT' => 20,
      'PID' => $payment_method['settings']['pid'],
      'TRID' => $trid,
    );
    $url = commerce_cib_create_url($query20, $payment_method['settings'], 'customer');
    header('Location: ' . $url);
    exit();
  }
  else  {
    drupal_set_message(t('Transaction initialization failed.'), 'warning');
    drupal_goto('');
  }
}

/**
 * Save or update a transaction.
 */
function commerce_cib_save_transaction(&$record, $mode = 'insert') {
  switch ($mode) {
    case 'update':
      $update = 'id';
      break;
    case 'insert':
      $update = array();
      break;
  }
  return drupal_write_record('commerce_cib_transactions', $record, $update);
}

/**
 * Menu callback for CIB redirecting to our site.
 */
function commerce_cib_finish_step($order, $payment_instance) {
  $payment_method = commerce_payment_method_instance_load('cib|' . $payment_instance);
  // Getting answer from the CIB payment gateway.
  $crypto = 'DATA=' . $_GET['DATA'] . '&PID=' . $_GET['PID'] . '&CRYPTO=1';
  $cleartext2 = ekiDecodeUrl($crypto, $payment_method['settings']['des']);
  parse_str($cleartext2, $query);
  $transaction = _commerce_cib_get_transaction($query['TRID']);
  if ($query['MSGT'] == '21' && $transaction['order_id'] == $order->order_id) {

    // Closing the transaction.
    $amo = field_get_items('commerce_order', $order, 'commerce_order_total');
    $amo = $amo[0]['amount'];
    $query32 = array(
      'CRYPTO' => 1,
      'MSGT' => 32,
      'PID' => $payment_method['settings']['pid'],
      'TRID' => $query['TRID'],
      'AMO' => $amo,
    );

    $url = commerce_cib_create_url($query32, $payment_method['settings']);
    $answer = drupal_http_request($url);
    if ($answer->code == 200) {
      $msgs = commerce_cib_analyse_message($answer, $payment_method, $order);
    }
    elseif ($answer->code == 500) {
      $query33 = array(
        'CRYPTO' => 1,
        'MSGT' => 33,
        'PID' => $payment_method['settings']['pid'],
        'TRID' => $query['TRID'],
        'AMO' => $amo,
      );
      $url = commerce_cib_create_url($query33, $payment_method['settings']);
      $answer = drupal_http_request($url);
      if ($answer->code == 200) {
        $msgs = commerce_cib_analyse_message($answer, $payment_method, $order);
      }
    }
  }
  else {
    $msgs = _commerce_cib_default_finish_message($order);
  }
  return theme('commerce_cib_finish', array('messages' => $msgs));
}

function commerce_cib_analyse_message($answer, $payment_method, $order) {
  $cleartext2 = ekiDecodeUrl($answer->data, $payment_method['settings']['des']);
  parse_str($cleartext2, $query);
  $msgs = array();
  $msgs[] = commerce_cib_get_errmsg($query['RC']);
  $transaction = _commerce_cib_get_transaction($query['TRID']);
  $transaction['msgt'] = $query['MSGT'];
  $transaction['rc'] = $query['RC'];
  $transaction['rt'] = iconv('ISO-8859-2//TRANSLIT', 'UTF-8', $query['RT']);
  $transaction['anum'] = $query['ANUM'];
  $transaction['end'] = time();
  $transaction['msgt'] = $query['MSGT'];
  commerce_cib_save_transaction($transaction, 'update');

  $msgs = array_merge($msgs, array(
    t('The transaction id is: @trid.',  array('@trid' => $query['TRID'])),
    t('The response code is: @rc.',  array('@rc' => $query['RC'])),
    t('The response message is: @rt.',  array('@rt' => iconv('ISO-8859-2//TRANSLIT', 'UTF-8', $query['RT']))),
    t('An email has been sent to @mail with the details.', array('@mail' => $order->mail)),
  ));
  if ($query['RC'] == '00') {
    $msgs[] = t('The permission number is: @anum.',  array('@anum' => $query['ANUM']));
    $msgs[] = t('The paid amount is: @amo Ft.',  array('@amo' => $query['AMO']));
    $msgs[] = t('Thank you for buying tickets to our concert!');
  }
  else {
    $msgs[] = t('Something went wrong. Please try again!');
  }
  global $language;

  $params = array();
  $params['RC'] = $query['RC'];
  $params['payment_method'] = $payment_method;
  $params['order'] = $order;
  $params['subject'] = variable_get('site_name') . t(' purchase');
  $params['body'] = t("Dear customer,\n");
  foreach ($msgs as $msg) {
    $params['body'] .= $msg . "\n";
  }
  drupal_mail('commerce_cib', 'payment_finished', $order->mail, $language, $params);

  if ($query['RC'] != '00') {
    commerce_order_status_update($order, 'checkout_checkout');
    $msgs[] = l(t('Go back to the checkout page'), 'checkout');
  }
  else {
    commerce_payment_redirect_pane_next_page($order);
    $msgs[] = l(t('Go to the home page'), '');
  }
  return $msgs;
}

/**
 * Default failure message for the finish page.
 *
 * @param object $order The order object
 *
 */
function _commerce_cib_default_finish_message($order) {
  $msgs = array();
  $msgs[] = t('Sorry, we could not communicate with CIB. Please try again later!');
  commerce_order_status_update($order, 'checkout_checkout');
  $msgs[] = l(t('Go back to the checkout page'), 'checkout');
  return $msgs;
}

/**
 * Theme function for the finish page.
 */
function theme_commerce_cib_finish($vars) {
  $return = '';
  foreach ($vars['messages'] as $msg) {
    $return .= $msg . '<br/>';
  }
  return $return;
}

/**
 * Get transaction data from db by TRID.
 */
function _commerce_cib_get_transaction($trid) {
  $result = db_select('commerce_cib_transactions', 'cct')
    ->fields('cct', array('id', 'order_id', 'email', 'eki_user', 'trid', 'amount', 'currency', 'msgt', 'rc', 'rt', 'anum', 'start', 'end', 'history'))
    ->condition('cct.trid', $trid)
    ->execute()
    ->fetchAll();
  return (array) $result[0];
}

/**
 * Prepare an URL for communication with CIB.
 *
 * @param array $query An array with the URL query keys and values.
 * @param array $settings The $payment_method['settings'] array.
 *
 * @return string The encoded URL.
 */
function commerce_cib_create_url($query, $settings, $market_customer = 'market') {
  $cleartext = '';
  foreach ($query as $key => $value) {
    $cleartext .= $key . '=' . $value . '&';
  }
  $cleartext = substr($cleartext, 0, -1);
  $crypto = ekiEncodeUrl($cleartext, $settings['des']);
  $function = ($market_customer == 'market') ? 'commerce_cib_env_url' : 'commerce_cib_env_customer_url'; 
  $url = $function($settings['env']) . '?'. $crypto;
  return $url;
}

/**
 * Implements hook_mail().
 */
function commerce_cib_mail($key, &$message, $params) {
  switch ($key) {
    case 'payment_finished' :
    case 'timeout' :
      if (isset($params['subject'])) {
        $message['subject'] = $params['subject'];
      }
      if (isset($params['body'])) {
        $message['body'][] = $params['body'];
      }
      break;
  }
}
/**
 * Implements hook_cron().
 */
function commerce_cib_cron() {
  commerce_cib_handle_timeouts();
}

/**
 * Handling timeouted transactions.
 *
 * Called by cron.
 */
function commerce_cib_handle_timeouts() {
  // Get unfinished transactions.
  $timeout_time = time() - COMMERCE_CIB_TIMEOUT;
  $timeouted_transactions = db_select('commerce_cib_transactions', 'cct')
    ->fields('cct', array('id', 'order_id', 'email', 'eki_user', 'trid', 'amount', 'currency', 'msgt', 'rc', 'rt', 'anum', 'start', 'end', 'history'))
    ->condition('cct.start', $timeout_time, '<')
    ->condition('cct.end', 0)
    ->execute()
    ->fetchAll();

  foreach ($timeouted_transactions as $tt) {
    $tt = (array) $tt;
    $order = commerce_order_load($tt['order_id']);
    // Get transaction error codes and history.
    _commerce_cib_transaction_investigate($tt);
    watchdog('commerce_cib', t('Transaction query returned: RC=!rc, RT=!rt, HISTORY=!history, ANUM=!anum, TRID=!trid', array('!rc' => $tt['rc'], '!rt' => $tt['rt'], '!history' => $tt['history'], '!anum' => ($tt['anum']) ? $tt['anum'] : 'n/a', '!trid' => $tt['trid'])));

    // Prepare variables for the notification email.
    // @todo: language should be determined by a more sane way.
    $languages = language_list();
    $params = array();
    $variables = array(
      '!email' => $order->mail,
      '!site' => 'http://' . $_SERVER['HTTP_HOST'],
      '!trid' => $tt['trid'],
      '!err_msg' => commerce_cib_get_errmsg($tt['rc']),
    );
    $params['body'] = t("Dear Customer,\nYou are receiving this email because your email address (!email)\nwas given in an order at !site with transaction ID !trid.\n\nWe apologize but your transaction did not get through. The error was the following:\n!err_msg\n\nImportant\n\nIf your card is processed during the transaction, the payment processor is automatically reversing your transaction within 10 minutes.\n\nThe products are kept in your shopping cart at !site. \n We apologize for the inconvenience.\n\n-- !site team", $variables, array('langcode' => 'hu'));
    $params['subject'] = t('http://!site transaction timeout', array('!site' => $variables['!site']), array('langcode' => 'hu'));
    // Send the notification email.
    if ($mail = drupal_mail('commerce_cib', 'timeout', $order->mail, $languages['hu'], $params)) {
      watchdog('commerce_cib', t('Transaction notification email sent to !mail', array('!mail' => $order->mail)));
    }
    commerce_order_status_update($order, 'canceled');
  }
}

/**
 * Investigate a broken transaction.
 *
 * Send a MSGT 33 (transaction status query) and if it succeeds
 * send a MSGT 37 (transaction history query).
 *
 * If we don't get a valid response, we close the transaction anyway by setting
 * the finishing timestamp.
 *
 * @param $transaction
 *   The complete transaction array passed by reference.
 */
function _commerce_cib_transaction_investigate(&$transaction) {
  // Send MSGT 33 to find out what happened with the transaction.
  // TODO: We do not know the name of the payment method.
  $payment_method = commerce_payment_method_instance_load('cib|commerce_payment_cib');
  $query33 = array(
    'MSGT' => 33,
    'PID' => $payment_method['settings']['pid'],
    'TRID' => $transaction['trid'],
    'AMO' => $transaction['amount'],
  );
  $url = commerce_cib_create_url($query33, $payment_method['settings']);
  $answer = drupal_http_request($url);
  if ($answer->code == 200) {
    $cleartext2 = ekiDecodeUrl($answer->data, $payment_method['settings']['des']);
    parse_str($cleartext2, $query);
    if (($query['TRID'] == $transaction['trid']) && ($query['MSGT'] == 31)) {
      $transaction['msgt'] = $query['MSGT'];
      $transaction['rc'] = $query['RC'];
      $transaction['rt'] = iconv('ISO-8859-2//TRANSLIT', 'UTF-8', $query['RT']); // Text messages are sent in latin2 by IIS.
      $transaction['anum'] = $query['ANUM'];

      $query37 = array(
        'MSGT' => 37,
        'PID' => $payment_method['settings']['pid'],
        'TRID' => $transaction['trid'],
        'AMO' => $transaction['amount'],
      );
      $url = commerce_cib_create_url($query37, $payment_method['settings']);
      $answer = drupal_http_request($url);
      if ($answer->code == 200) {
        $cleartext2 = ekiDecodeUrl($answer->data, $payment_method['settings']['des']);
        parse_str($cleartext2, $query);
        if (($query['TRID'] == $transaction['trid']) && ($query['MSGT'] == 38)) {
          $transaction['history'] = $query['HISTORY'];
        }
      }

    }
    else {
      $transaction['rc'] = '';
    }
    $transaction['end'] = time();
    commerce_cib_save_transaction($transaction, 'update');
  }
}

/**
 * Generate messages from return codes.
 */
function commerce_cib_get_errmsg($rc) {
  $message = '';

  switch ($rc) {
    case '00':
      $message = t('The transaction was successful.');
      break;

    case '03':
    case '09':
    case '12':
    case '13':
    case '20':
    case '21':
    case '22':
    case '30':
    case '34':
    case '36':
    case '42':
    case '52':
    case '54':
    case '55':
    case '56':
    case '87':
    case '88':
    case '90':
      $message = t('Your card information appears to be invalid. Please check that:');
      $list = array(
        t('you have entered the correct card number,'),
        t('you have entered the expiry date of your card,'),
        t('your card has not expired yet,'),
        t('in case of an EC/MC card you have entered the CVC code (three digits on the back of your card near the signature zone)'),
        t('your card is allowed for transactions on the internet'),
        t('in case of a Visa card you have entered the CVV code (three digits on the back of your card).'),
      );
      break;

    case '14':
    case '15':
    case '16':
    case '17':
    case '23':
    case '24':
    case '29':
    case '32':
    case '35':
    case '45':
    case '69':
    case '70':
    case '72':
    case '74':
    case '75':
    case '76':
    case '77':
    case '78':
      $message = t('Your order could not be fulfilled. Please check that:');
      $list = array(
        t('you have sufficient funds available on your card,'),
        t("you haven't exceeded your allowed limit."),
      );
      break;

    case '08':
    case '10':
    case '19':
    case '27':
    case '31':
    case '60':
    case '64':
    case '65':
    case '71':
    case '86':
    case '93':
    case 'A2':
    case 'A9':
      $list = array(
        t('The connection was probably lost somewhere during the transaction.'),
      );
      break;

    case '50':
    case 'TO':
      $list = array(
        t('The transaction has timed out.'),
      );
      break;

    case 'C2':
      $list = array(
        t('You have canceled the transaction. You can try completing the order again by <a href="!url">starting over here</a>.', array('!url' => url('cart'))),
      );
      break;

    default:
      $list = array(
        t('An unknown error has occurred with the transaction.'),
      );
      break;
  }
  if (isset($list) && is_array($list)) {
    $message .= theme('item_list', array('items' => $list));
  }
  return (!empty($message)) ? $message : FALSE;
}

/**
 * CIB market url.
 *
 * @param string $env 'live'or something else
 *
 *  Return live or test CIB market url.
 */
function commerce_cib_env_url($env) {
  if ($env == 'live') {
    return 'http://eki.cib.hu:8090/market.saki';
  }
  return 'http://ekit.cib.hu:8090/market.saki';
}

/**
 * CIB customer url
 *
 * @param string $env 'live'or something else
 *
 *  Return live or test CIB customer url.
 */
function commerce_cib_env_customer_url($env) {
  if ($env == 'live') {
    return 'https://eki.cib.hu/customer.saki';
  }
  return 'https://ekit.cib.hu/customer.saki';
}

/**
 * Encryption using the saki protocoll.
 *
 * @param $plaintext: The string to encrypt.
 * @param $keyfile: The keyfile path needed for the encryption.
 *
 * @return The encrypted message.
 */
function ekiEncodeUrl($plaintext, $keyfile) {
  $f = fopen($keyfile,"r");
  $keyinfo = fread($f, 38);
  fclose($f);
  $k1 = substr($keyinfo, 14, 8);
  $k2 = substr($keyinfo, 22, 8);
  $iv = substr($keyinfo, 30, 8);
  $key = $k1 . $k2 . $k1;
  $arr = explode("&", $plaintext);
  $outs = "";
  $pid = "";
  for ($i = 0; $i < count($arr); $i++) {
    if (strtoupper($arr[$i]) != "CRYPTO=1") {
      $outs .= "&" . $arr[$i];
    }
    if (substr(strtoupper($arr[$i]), 0, 4)=="PID=") {
      $pid=substr(strtoupper($arr[$i]), 4, 7);
    }
  }
  $outs = substr($outs, 1);
  $outs = rawurlencode($outs);
  $outs = str_replace("%3D", "=", $outs);
  $outs = str_replace("%26", "&", $outs);
  $crc = str_pad(dechex(crc32($outs)), 8, "0", STR_PAD_LEFT);
  for ($i=0; $i<4; $i++) {
    $outs .= chr(base_convert(substr($crc, $i*2, 2), 16, 10));
  }
  $pad = 8 - (strlen($outs) % 8);
  for ($i = 0; $i < $pad; $i++) {
    $outs .= chr($pad);
  }
  $td = mcrypt_module_open("tripledes", "", "cbc", "");
  mcrypt_generic_init($td, $key, $iv);
  $outs = mcrypt_generic($td, $outs);
  mcrypt_module_close($td);
  $pad = 3 - (strlen($outs) % 3);
  for ($i = 0; $i < $pad; $i++)
    $outs .= chr($pad);
  $outs = base64_encode($outs);
  $outs = rawurlencode($outs);
  $outs = "PID=" . $pid . "&CRYPTO=1&DATA=" . $outs;
  return $outs;
}

/**
 * Decryption using the saki protocoll.
 *
 * @param $plaintext: The string to decrypt.
 * @param $keyfile: The keyfile path needed for the encryption.
 *
 * @return The decrypted message or an empty string in case of crc error.
 */
function ekiDecodeUrl($crypto, $keyfile) {
  $f = fopen($keyfile, "r");
  $keyinfo = fread($f, 38);
  fclose($f);
  $k1 = substr($keyinfo, 14, 8);
  $k2 = substr($keyinfo, 22, 8);
  $iv = substr($keyinfo, 30, 8);
  $key = $k1 . $k2 . $k1;
  $arr = explode("&", $crypto);
  $outs = "";
  $pid = "";
  for ($i=0; $i < count($arr); $i++) {
    if (substr(strtoupper($arr[$i]), 0, 5) == "DATA=") {
      $outs = substr($arr[$i], 5);
    }
    if (substr(strtoupper($arr[$i]), 0, 4) == "PID=") {
      $pid = substr(strtoupper($arr[$i]), 4, 7);
    }
  }
  $outs = rawurldecode($outs);
  $outs = base64_decode($outs);
  $lastc = ord($outs[strlen($outs) - 1]);
  $validpad = 1;
  for ($i = 0; $i < $lastc; $i++) {
    if (ord(substr($outs, strlen($outs) - 1 - $i, 1)) != $lastc) {
      $validpad = 0;
    }
  }
  if ($validpad==1) {
    $outs = substr($outs, 0, strlen($outs) - $lastc);
  }
  $td = mcrypt_module_open("tripledes", "", "cbc", "");
  mcrypt_generic_init($td, $key, $iv);
  $outs = mdecrypt_generic($td, $outs);
  mcrypt_module_close($td);
  $lastc = ord($outs[strlen($outs) - 1]);
  $validpad = 1;
  for ($i = 0; $i < $lastc; $i++) {
    if (ord(substr($outs, strlen($outs) - 1 - $i, 1)) != $lastc) {
    $validpad = 0;
    }
  }
  if ($validpad == 1) {
    $outs = substr($outs, 0, strlen($outs) - $lastc);
  }
  $crc = substr($outs, strlen($outs) - 4);
  $crch = "";
  for ($i = 0; $i < 4; $i++) {
    $crch .= str_pad(dechex(ord($crc[$i])), 2, "0", STR_PAD_LEFT);
  }
  $outs = substr($outs, 0, strlen($outs) - 4);
  $crc = str_pad(dechex(crc32($outs)), 8, "0", STR_PAD_LEFT);
  if ($crch != $crc) {
    return "";
  }
  $outs = str_replace("&", "%26", $outs);
  $outs = str_replace("=", "%3D", $outs);
  $outs = rawurldecode($outs);
  $outs = "CRYPTO=1&" . $outs;
  return $outs;
}

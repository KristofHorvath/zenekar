<?php

/**
 * Install file for COmmerce CIB module.
 */

/**
 * Implements hook_requirements().
 */
function commerce_cib_requirements($phase) {
  $severity = REQUIREMENT_ERROR;
  if (extension_loaded('mcrypt')) {
    $severity = REQUIREMENT_OK;
  }

  $t = get_t();
  return array('commerce_cib_mcrypt' => array(
    'title' => $t('mcrypt for Commerce CIB'),
    'value' => '',
    'severity' => $severity,
  ));
}

/**
 * Implementats hook_schema().
 */
function commerce_cib_schema() {
  $schema = array();

  $schema['commerce_cib_transactions'] = array(
    'description' => 'CIB Commerce payment transactions.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'order_id' => array(
        'description' => 'The order ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'email' => array(
        'description' => 'The customer email.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'eki_user' => array(
        'description' => 'The user ID according to the EKI specs.',
        'type' => 'varchar',
        'length' => '11',
        'not null' => TRUE,
        'default' => '',
      ),
      'trid' => array(
        'description' => 'The transaction ID generated by the store.',
        'type' => 'varchar',
        'length' => '16',
        'not null' => TRUE,
        'default' => '',
      ),
      'amount' => array(
        'description' => 'The amount of payment in transaction.',
        'type' => 'numeric',
        'precision' => 9,
        'scale' => 2,
        'not null' => TRUE,
        'default' => 0.0,
      ),
      'currency' => array(
        'description' => 'The currency of payment in transaction.',
        'type' => 'varchar',
        'length' => 3,
        'not null' => TRUE,
        'default' => '',
      ),
      'msgt' => array(
        'description' => 'The message type identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'rc' => array(
        'description' => 'The return code of the transaction step.',
        'type' => 'varchar',
        'length' => 2,
        'not null' => TRUE,
        'default' => '',
      ),
      'rt' => array(
        'description' => 'The return text of the transaction step.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'anum' => array(
        'description' => 'The number of the authorisation permit.',
        'type' => 'varchar',
        'length' => 6,
        'not null' => TRUE,
        'default' => '',
      ),
      'start' => array(
        'description' => 'Timestamp when starting the transaction.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'end' => array(
        'description' => 'Timestamp when ending the transaction.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'history' => array(
        'description' => 'The historical steps of the transaction.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'trid' => array('trid'),
    ),
    'indexes' => array(
      'order_id' => array('order_id'),
      'order_user_trid' => array('order_id', 'trid'),
    ),
  );

  return $schema;
}


<?php

/**
 * @file Tracks time spent on comments.
 */

/**
 * Implements hook_permission().
 */
function comment_timer_permission() {
  $return = array();
  $return['access comment timer'] = array(
    'title' => t('Access Comment Timer'),
    'description' => t('Show the Comment Timer form elements and data.'),
  );
  return $return;
}

/**
 * Implements hook_og_permission().
 */
function comment_timer_og_permission() {
  $perms = array();
  $perms['access comment timer'] = array(
    'title' => t('Access Comment Timer'),
    'description' => t('Show the Comment Timer form elements and data.'),
    'roles' => array(OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE),
    'default role' => array(),
  );
  return $perms;
}

/**
 * Determine whether a user has a given privilege of Comment Timer.
 *
 * @param $nid
 *   The {node}.nid the permission should be checked against. Being used only in
 *   case of Organic Groups.
 * @param $string
 *   The permission, such as 'access comment timer', being checked for.
 * @param $account
 *   (optional) The account to check. Defaults to the current user.
 */
function comment_timer_user_access($nid, $string, $account = NULL) {
  global $user;
  if (empty($account)) {
    $account = clone $user;
  }
  if (user_access($string, $account)) {
    return TRUE;
  }
  if (!module_exists('og')) {
    return FALSE;
  }
  $node = node_load($nid);
  if (!$node) {
    return FALSE;
  }
  if (og_is_group_content_type('node', $node->type)) {
    $gid = og_get_entity_groups('node', $node->nid);
    if (!empty($gid)) {
      $gid = reset($gid);
      $gid = reset($gid);
    }
    if (!empty($gid)) {
      return og_user_access('node', $gid, $string, $account);
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function comment_timer_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $form['comment']['comment_timer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow time-tracking comments'),
    '#default_value' => variable_get('comment_timer_' . $form['#node_type']->type, 0),
  );
  $form['comment']['comment_timer_node_label'] = array(
    '#type' => 'select',
    '#title' => t('Label of comment timer on a node'),
    '#options' => array(
      'above' => t('Above'),
      'inline' => t('Inline'),
      'hidden' => t('<Hidden>'),
    ),
    '#default_value' => variable_get('comment_timer_node_label_' . $form['#node_type']->type, 'above'),
    '#states' => array(
      'visible' => array(
        ':input[name=comment_timer]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['comment']['comment_timer_comment_label'] = array(
    '#type' => 'select',
    '#title' => t('Label of comment timer on a comment'),
    '#options' => array(
      'above' => t('Above'),
      'inline' => t('Inline'),
      'hidden' => t('<Hidden>'),
    ),
    '#default_value' => variable_get('comment_timer_comment_label_' . $form['#node_type']->type, 'above'),
    '#states' => array(
      'visible' => array(
        ':input[name=comment_timer]' => array('checked' => TRUE),
      ),
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function comment_timer_field_extra_fields() {
  $return = array();
  foreach (node_type_get_types() as $type) {
    if (variable_get('comment_timer_' . $type->type, 0)) {
      $return['comment']['comment_node_' . $type->type]['form']['comment_timer'] = array(
        'label' => t('Comment timer'),
        'description' => t('Stopwatch for measuring time spent on this comment.'),
        'weight' => 0,
      );
      $return['comment']['comment_node_' . $type->type]['display']['comment_timer'] = array(
        'label' => t('Comment timer'),
        'description' => t('Time spent on this comment.'),
        'weight' => 0,
      );
      $return['comment']['comment_node_' . $type->type]['display']['comment_time_inclusion'] = array(
        'label' => t('Comment time inclusion'),
        'description' => t('Link to include/exclude comment time in node time.'),
        'weight' => 0,
      );
      $return['node'][$type->type]['display']['comment_timer'] = array(
        'label' => t('Comment timer'),
        'description' => t('Total time spent on this node\'s comments.'),
        'weight' => 0,
      );
    }
  }
  return $return;
}

/**
 * Converts number of seconds to HH:MM:SS.
 */
function _comment_timer_seconds_to_hms($seconds) {
  $hours = $minutes = 0;
  if ($seconds >= 60) {
    $minutes = floor($seconds / 60);
    $seconds %= 60;
  }
  if ($minutes >= 60) {
    $hours = floor($minutes / 60);
    $minutes %= 60;
  }
  return sprintf('%02d:%02d:%02d', $hours, $minutes, $seconds);
}

/**
 * Converts 'HH:MM:SS' to seconds. Does not validates by itself.
 */
function _comment_timer_hms_to_seconds($string) {
  $hms = explode(':', $string);
  return 3600 * $hms[0] + 60 * $hms[1] + $hms[2];
}

/**
 * Add comment timer elements to a form.
 */
function _comment_timer_form_timer(&$form, $seconds = 0, $status = 1) {
  // Add a fieldset to contain everything comment_timer related.
  $form['comment_timer'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#title' => t('Comment timer'),
    // Weight is automatically handled via Field API's
    // hook_field_extra_fields().
  );
  $form['comment_timer']['seconds'] = array(
    '#type' => 'textfield',
    '#description' => t('Time to store (hh:mm:ss)'),
    '#size' => '8',
    '#default_value' => '',
  );
  $form['comment_timer']['elapsed'] = array(
    '#type' => 'textfield',
    '#description' => t('Time spent (hh:mm:ss)'),
    '#size' => '8',
    '#default_value' => _comment_timer_seconds_to_hms($seconds),
    // This is the ID the JS works on.
    '#id' => 'edit-comment-timer-counter',
  );
  $form['comment_timer']['status'] = array(
    '#type' => 'select',
    '#default_value' => $status,
    '#options' => array(
      1 => t('Include in node time'),
      0 => t('Exclude from node time'),
    ),
  );
  $form['comment_timer']['reset'] = array(
    '#type' => 'button',
    '#value' => t('Reset'),
    // This is the ID the JS works on.
    '#id' => 'edit-comment-timer-reset',
  );
  $form['comment_timer']['pause'] = array(
    '#type' => 'button',
    '#value' => t('Pause'),
    // This is the ID the JS works on.
    '#id' => 'edit-comment-timer-pause',
  );
  $form['#attached']['js'][] = drupal_get_path('module', 'comment_timer'). '/comment_timer.js';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function comment_timer_form_comment_form_alter(&$form, &$form_state, $form_id) {
  $node = &$form['#node'];
  if (variable_get('comment_timer_' . $node->type, 0) && comment_timer_user_access($node->nid, 'access comment timer')) {
    if (isset($form_state['values']) && is_array($form_state['values']) && isset($form_state['values']['comment_timer']) && is_array($form_state['values']['comment_timer'])) {
      // If the form is only previewed, retrieve timer information from
      // there. If the first textfield is not empty, consider that one
      // instead of the (auto-measured) second one.
      if ($form_state['values']['comment_timer']['seconds'] == '') {
        $seconds = _comment_timer_hms_to_seconds($form_state['values']['comment_timer']['elapsed']);
      }
      else {
        $seconds = _comment_timer_hms_to_seconds($form_state['values']['comment_timer']['seconds']);
      }
      $status = $form_state['values']['comment_timer']['status'];
    }
    else {
      // If the form is simply displayed, retrieve timing information from
      // the DB.
      if (isset($form['cid']) && is_array($form['cid']) && isset($form['cid']['#value'])) {
        $comment_time_properties = db_select('comment_timer_comment', 'ctc')
          ->fields('ctc', array('seconds', 'status'))
          ->condition('cid', $form['cid']['#value'])
          ->execute()
          ->fetchAssoc();
        $seconds = $comment_time_properties['seconds'];
        $status = $comment_time_properties['status'];
      }
      else {
        $seconds = 0;
        $status = 1;
      }
    }
    _comment_timer_form_timer($form, $seconds, $status);
    $form['#validate'][] = 'comment_timer_form_validate';
  }
}

/**
 * Validates comment timer time information textfield.
 */
function comment_timer_form_validate($form, &$form_state) {
  $check = 'seconds';
  if ($form_state['values']['comment_timer']['seconds'] == '') {
    $check = 'elapsed';
  }
  if (($form_state['values']['comment_timer'][$check] != '') && !preg_match('/^\d{2}:(\d{2}):(\d{2})$/', $form_state['values']['comment_timer'][$check], $matches)) {
    form_set_error('comment_timer][' . $check, t('Invalid time format.'));
  }
  elseif ($matches[1] >= 60 || $matches[2] >= 60) {
    form_set_error('comment_timer][' . $check, t('Invalid time format.'));
  }
}

/**
 * Retrieves the number of seconds from the appropriate (form) field.
 *
 * @param $comment
 *   Comment object in a form structure.
 * @return int
 *   Number of seconds found in the form.
 */
function _comment_timer_retrieve_seconds($comment) {
  return $comment->comment_timer['seconds'] ? _comment_timer_hms_to_seconds($comment->comment_timer['seconds']) : _comment_timer_hms_to_seconds($comment->comment_timer['elapsed']);
}

/**
 * Implements hook_comment_insert().
 */
function comment_timer_comment_insert($comment) {
  // Do not try to save anything if comment_timer is disabled for this comment.
  if (isset($comment->comment_timer)) {
    if (is_array($comment->comment_timer)) {
      $comment_timer = array(
        'cid' => $comment->cid,
        'seconds' => _comment_timer_retrieve_seconds($comment),
        'status' => $comment->comment_timer['status'],
      );
    }
    else {
       $comment_timer = array(
        'cid' => $comment->cid,
        'seconds' => $comment->comment_timer,
        'status' => $comment->comment_timer_status,
      );
    }
    drupal_write_record('comment_timer_comment', $comment_timer);
    _comment_alter_update_node_timer($comment->nid);
  }
}

/**
 * Implements hook_comment_load().
 */
function comment_timer_comment_load($comments) {
  $result = db_select('comment_timer_comment', 'ctc')
    ->fields('ctc', array('cid', 'seconds', 'status'))
    ->condition('cid', array_keys($comments), 'IN')
    ->execute();
  foreach ($result as $row) {
    $comments[$row->cid]->comment_timer = $row->seconds;
    $comments[$row->cid]->comment_timer_status = $row->status;
  }
}

/**
 * Implements hook_comment_view().
 */
function comment_timer_comment_view($comment, $view_mode, $langcode) {
  if (comment_timer_user_access($comment->nid, 'access comment timer') && isset($comment->comment_timer)) {
    // If the comment is being previewed, $comment object holds the fully-loaded
    // form values as found on the form, so seconds data needs to be retrieved
    // from the form-structured data first.
    $seconds = $comment->comment_timer;
    if (is_array($comment->comment_timer)) {
      $seconds = _comment_timer_retrieve_seconds($comment);
      $status = $comment->comment_timer['status'];
    }
    else {
      $status = $comment->comment_timer_status;
    }

    $comment->content['comment_timer'] = array(
      '#theme' => 'comment_timer_hhmmss',
      '#seconds' => $seconds,
      '#status' => $status,
      '#label' => t('Time spent on this comment'),
      '#label_display' => variable_get('comment_timer_comment_label_' . substr($comment->node_type, 13), 'above'),
      '#prefix' => '<div class="comment-timer-data">',
      '#suffix' => '</div>',
    );
    $field_view_mode_settings = field_view_mode_settings('comment', $comment->node_type);
    $real_view_mode = $field_view_mode_settings[$view_mode]['custom_settings'] ? $view_mode : 'default';
    $field_info_extra_fields = field_info_extra_fields('comment', $comment->node_type, 'display');
    if ($field_info_extra_fields['comment_time_inclusion']['display'][$real_view_mode]['visible']) {
      if (comment_access('edit', $comment)) {
        $comment->content['links']['comment_timer'] = array(
          '#theme' => 'links',
          '#links' => array(
            'comment-timer-inclusion' => comment_timer_status_link_array($comment),
          ),
        );
        $comment->content['#attached']['js'][] = 'misc/ajax.js';
      }
      else {
        $markup = '<span class="comment-timer-status comment-timer-status-noedit comment-timer-status-' . $comment->comment_timer_status . '">';
        $markup .= $comment->comment_timer_status ? t('Included in total node time') : t('Excluded from total node time');
        $markup .= '</span>';
        $comment->content['links']['comment_timer'] = array(
          '#theme' => 'links',
          '#links' => array(
            'comment-timer-inclusion' => array(
              'title' => $markup,
              'html' => TRUE,
            ),
          ),
        );
      }
    }
  }
}

/**
 * Create the ingredients of a comment timer status ajax link.
 */
function comment_timer_status_link_array($comment) {
  return array(
    'title' => !empty($comment->comment_timer_status) ? t('Exclude from node total time') : t('Include in node total time'),
    'href' => 'comment-timer-inclusion-toggle/' . $comment->cid . '/nojs',
    'attributes' => array(
      'class' => array('use-ajax'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function comment_timer_menu() {
  $items = array();
  $items['comment-timer-inclusion-toggle/%comment'] = array(
    'title' => 'Toggle comment timer inclusion',
    'page callback' => 'comment_timer_inclusion_toggler',
    'page arguments' => array(1),
    'access callback' => 'comment_access',
    'access arguments' => array('edit', 1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu callback to toggle the comment time status property.
 */
function comment_timer_inclusion_toggler($comment, $type = 'ajax') {
  if ($comment->comment_timer_status == 0) {
    $comment->comment_timer_status = 1;
  }
  else {
    $comment->comment_timer_status = 0;
  }
  comment_save($comment);
  if ($type == 'ajax') {
    $link = comment_timer_status_link_array($comment);
    $commands = array();
    $commands[] = ajax_command_html('#comment-' . $comment->cid . '+div .comment-timer-inclusion', l($link['title'], $link['href'], array('attributes' => $link['attributes'])));
    drupal_alter('comment_timer_commands', $commands, $comment);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    drupal_goto('node/' . $comment->nid . '#comment-' . $comment->cid);
  }
}

/**
 * Implements hook_comment_delete().
 */
function comment_timer_comment_delete($comment) {
  // Comment_timer data should always be deleted when the comment gets deleted,
  // regardless whether this content type/node/comment had comment_timer enabled
  // or not. This ensures that comment_timer sums for nodes will be correct when
  // some of the comments got added with comment_timer enabled and others
  // without it.
  db_delete('comment_timer_comment')
    ->condition('cid', $comment->cid)
    ->execute();
  _comment_alter_update_node_timer($comment->nid);
}

/**
 * Implements hook_comment_update().
 */
function comment_timer_comment_update($comment) {
  // Do not try to save anything if comment_timer is disabled for this comment.
  if (isset($comment->comment_timer)) {
    if (is_array($comment->comment_timer)) {
      $comment_timer = array(
        'seconds' => _comment_timer_retrieve_seconds($comment),
        'status' => $comment->comment_timer['status'],
      );
    }
    else {
      $comment_timer = array(
        'seconds' => $comment->comment_timer,
        'status' => $comment->comment_timer_status,
      );
    }
    db_merge('comment_timer_comment')
      ->key(array('cid' => $comment->cid))
      ->fields($comment_timer)
      ->execute();
    _comment_alter_update_node_timer($comment->nid);
  }
}

/**
 * Updates comment_timer sum for a given node.
 *
 * @param $nid
 *   The {node}.nid that needs updating.
 */
function _comment_alter_update_node_timer($nid) {
  $query = db_select('comment', 'c')
    ->condition('c.nid', $nid);
  $ctc_alias = $query->innerJoin('comment_timer_comment', 'ctc', 'c.cid = %alias.cid');
  $query = $query->condition("{$ctc_alias}.status", 1);
  $query->addExpression('SUM(seconds)', 'sumseconds');
  $seconds = $query->execute()->fetchField();
  db_merge('comment_timer_node')
    ->key(array('nid' => $nid))
    ->fields(array(
      // Casting to int in case of there's no comment_timered comments for this
      // node, because it means $seconds is NULL.
      'seconds' => (int) $seconds,
    ))
    ->execute();
}

/**
 * Implements hook_theme().
 */
function comment_timer_theme() {
  $return = array();
  $return['comment_timer_hhmmss'] = array(
    'variables' => array(
      'seconds' => 0,
      'label' => '',
      'label_display' => 'above',
    ),
  );
  return $return;
}

/**
 * Returns HTML for seconds as HH:MM:SS.
 *
 * @param array $variables
 *   An associative array containing:
 *   - seconds: The number of seconds to be displayed.
 *   - label: Label text to be displayed.
 *   - label_display: Label display, may be either 'above', 'inline' or
 *     'hidden'.
 *
 * @ingroup themeable
 */
function theme_comment_timer_hhmmss($variables) {
  $output = '';
  if (isset($variables['label_display']) && $variables['label_display'] != 'hidden') {
    $classes = 'field';
    if ($variables['label_display'] == 'inline') {
      $classes .= ' field-label-inline clearfix';
    }
    $output .= '<div class="' . $classes . '">';
    $output .= '<div class="field-label">' . $variables['label'] . ': </div>';
    $output .= '<div class="field-items comment-timer-hhmmss">' . _comment_timer_seconds_to_hms($variables['seconds']) . '</div>';
    $output .= '</div>';
  }
  else {
    $output .= '<div class="field"><div class="field-items comment-timer-hhmmss">' . _comment_timer_seconds_to_hms($variables['seconds']) . '</div></div>';
  }
  return $output;
}

/**
 * Implements hook_node_delete().
 */
function comment_timer_node_delete($node) {
  db_delete('comment_timer_node')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_load().
 */
function comment_timer_node_load($nodes, $types) {
  $result = db_select('comment_timer_node', 'ctn')
    ->fields('ctn', array('nid', 'seconds'))
    ->condition('nid', array_keys($nodes), 'IN')
    ->execute();
  foreach ($result as $node) {
    $nodes[$node->nid]->comment_timer = $node->seconds;
  }
}

/**
 * Implements hook_node_view().
 */
function comment_timer_node_view($node, $view_mode, $langcode) {
  if (variable_get('comment_timer_' . $node->type, 0) && comment_timer_user_access($node->nid, 'access comment timer')) {
    $node->content['comment_timer'] = array(
      '#theme' => 'comment_timer_hhmmss',
      '#seconds' => isset($node->comment_timer) ? $node->comment_timer : 0,
      '#label' => t('Total time spent on this node\'s comments'),
      '#label_display' => variable_get('comment_timer_node_label_' . $node->type, 'above'),
    );
  }
}

/**
 * Implements hook_node_type_delete().
 */
function comment_timer_node_type_delete($info) {
  variable_del('comment_timer_' . $info->type);
  variable_del('comment_timer_node_label_' . $info->type);
  variable_del('comment_timer_comment_label_' . $info->type);
}

/**
 * Implements hook_views_api().
 */
function comment_timer_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'comment_timer') . '/views',
  );
}

diff --git a/modules/media_wysiwyg/js/media_wysiwyg.filter.js b/modules/media_wysiwyg/js/media_wysiwyg.filter.js
index 7de50af..83a0875 100644
--- a/modules/media_wysiwyg/js/media_wysiwyg.filter.js
+++ b/modules/media_wysiwyg/js/media_wysiwyg.filter.js
@@ -15,34 +15,44 @@
      */
     replaceTokenWithPlaceholder: function(content) {
       Drupal.media.filter.ensure_tagmap()
-      var tagmap = Drupal.settings.tagmap,
-        matches = content.match(/\[\[.*?\]\]/g),
-        media_definition;
+      var matches = content.match(/\[\[.*?"type":"media".*?\]\]/g);
 
       if (matches) {
-        for (var macro in tagmap) {
-          // We cant use indexOf because of IE.
-          var index = $.inArray(macro, matches);
-          if (index !== -1) {
-            var media_json = macro.replace('[[', '').replace(']]', '');
-
-            // Make sure that the media JSON is valid.
-            try {
-              media_definition = JSON.parse(media_json);
-            }
-            catch (err) {
-              media_definition = null;
-            }
-            if (media_definition) {
-              // Apply attributes.
-              var element = Drupal.media.filter.create_element(tagmap[macro], media_definition);
-              var markup = Drupal.media.filter.outerHTML(element);
-
-              content = content.replace(macro, markup);
-            }
+        for (var i = 0; i < matches.length; i++) {
+          var match = matches[i];
+
+          // Check if the macro exists in the tagmap. This ensures backwards
+          // compatibility with existing media and is moderately more efficient
+          // than re-building the element.
+          var media = Drupal.settings.tagmap[match];
+          var media_json = match.replace('[[', '').replace(']]', '');
+
+          // Ensure that the media JSON is valid.
+          try {
+            var media_definition = JSON.parse(media_json);
           }
+          catch (err) {
+            // @todo: error logging.
+            // Content should be returned to prevent an empty editor.
+            return content;
+          }
+
+          // Re-build the media if the macro has changed from the tagmap.
+          if (!media && media_definition.fid) {
+            Drupal.media.filter.ensureSourceMap();
+            var source = Drupal.settings.mediaSourceMap[media_definition.fid];
+            media = document.createElement(source.tagName);
+            media.src = source.src;
+          }
+
+          // Apply attributes.
+          var element = Drupal.media.filter.create_element(media, media_definition);
+          var markup  = Drupal.media.filter.outerHTML(element);
+
+          content = content.replace(match, markup);
         }
       }
+
       return content;
     },
 
@@ -52,27 +62,41 @@
      */
     replacePlaceholderWithToken: function(content) {
       Drupal.media.filter.ensure_tagmap();
-      // Convert all xhtml markup to html for reliable matching/replacing.
-      content = content.replace(/[\s]\/\>/g, '>');
+      var markup = document.createElement('div');
+      $(markup).html(content);
 
-      // Re-build the macros in case any element has changed in the editor.
-      $('.media-element', content).each(function(i, element) {
-        var markup = Drupal.media.filter.outerHTML($(element));
-          macro = Drupal.media.filter.create_macro($(element));
+      var matches = markup.querySelectorAll('.media-element');
+
+      var placeholders = [];
+
+      // Rewrite the tagmap in case any of the macros have changed.
+      Drupal.settings.tagmap = {};
+
+      for (var i = 0; i < matches.length; i++) {
+        var macro = Drupal.media.filter.create_macro($(matches[i]));
 
         // Store the macro => html for more efficient rendering in
         // replaceTokenWithPlaceholder().
-        Drupal.settings.tagmap[macro] = markup;
-        // Replace the media element with its macro.
-        content = content.replace(markup, macro);
-      });
+        Drupal.settings.tagmap[macro] = matches[i];
 
-      return content;
+        placeholders[i] = {
+          match: matches[i],
+          node: document.createTextNode(macro)
+        }
+      }
+
+      // We have to loop through the placeholders separately because
+      // replaceChild will shift off the replacement from the NodeList.
+      for (i in placeholders) {
+        placeholders[i].match.parentNode.replaceChild(placeholders[i].node, placeholders[i].match);
+      }
+
+      return $(markup).html();
     },
 
     /**
-     * Serializes file information as a url-encoded JSON object and stores it as a
-     * data attribute on the html element.
+     * Serializes file information as a url-encoded JSON object and stores it
+     * as a data attribute on the html element.
      *
      * @param html (string)
      *    A html element to be used to represent the inserted media element.
@@ -81,12 +105,18 @@
      */
     create_element: function (html, info) {
       if ($('<div></div>').append(html).text().length === html.length) {
-        // Element is not an html tag. Surround it in a span element
-        // so we can pass the file attributes.
+        // Element is not an html tag. Surround it in a span element so we can
+        // pass the file attributes.
         html = '<span>' + html + '</span>';
       }
       var element = $(html);
 
+      // Parse out link wrappers. They will be re-applied when the image is
+      // rendered on the front-end.
+      if (element.is('a')) {
+        element = element.children();
+      }
+
       // Move attributes from the file info array to the placeholder element.
       if (info.attributes) {
         $.each(Drupal.settings.media.wysiwyg_allowed_attributes, function(i, a) {
@@ -95,6 +125,13 @@
           }
         });
         delete(info.attributes);
+
+        // Store information to rebuild the element later, if necessary.
+        Drupal.media.filter.ensureSourceMap();
+        Drupal.settings.mediaSourceMap[info.fid] = {
+          tagName: element[0].tagName,
+          src: element[0].src
+        }
       }
 
       // Important to url-encode the file information as it is being stored in an
@@ -102,7 +139,7 @@
       info.type = info.type || "media";
       element.attr('data-file_info', encodeURI(JSON.stringify(info)));
 
-      // Adding media-element class so we can find markup element later.
+      // Add media-element class so we can find markup element later.
       var classes = ['media-element'];
 
       if(info.view_mode){
@@ -198,6 +235,14 @@
     },
 
     /**
+     * Ensures the src tracking has been initialized and returns it.
+     */
+    ensureSourceMap: function() {
+      Drupal.settings.mediaSourceMap = Drupal.settings.mediaSourceMap || {};
+      return Drupal.settings.mediaSourceMap;
+    },
+
+    /**
      * Ensures the tag map has been initialized and returns it.
      */
     ensure_tagmap: function () {
@@ -205,4 +250,5 @@
       return Drupal.settings.tagmap;
     }
   }
+
 })(jQuery);

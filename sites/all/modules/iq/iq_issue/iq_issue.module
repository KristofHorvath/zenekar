<?php
/**
 * @file
 * Code for the IssueQ Issue feature.
 */

include_once 'iq_issue.features.inc';

/**
 * Implements hook_preprocess_views_view_table().
 */
function iq_issue_preprocess_views_view_table(&$vars) {
  if ($vars['view']->name == 'issues') {
    foreach ($vars['result'] as $key => $row) {
      $vars['row_classes'][$key][] = 'iq-status-' . drupal_html_class($row->field_field_issue_status_term[0]['rendered']['#title']);
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function iq_issue_theme_registry_alter(&$theme_registry) {
  // This template belongs to the module, not the theme, so let's inform the
  // theme layer about its place and stuff.
  $theme_registry['views_view_table__issues'] = array(
    'template' => 'views-view-table--issues',
    'path' => drupal_get_path('module', 'iq_issue') . '/theme',
    'variables' => array(
      'view' => NULL,
      'options' => NULL,
      'rows' => NULL,
      'title' => NULL,
    ),
    'base hook' => 'views_view_table',
    'type' => 'module',
    'theme path' => drupal_get_path('theme', variable_get('theme_default', 'iq_garland')),
    'preprocess functions' => array(),
    'process functions' => array(),
  );
}

/**
 * Helper function to add AJAX relation between issue kanban checkbox and status.
 *
 * @param $form
 *   Form to be altered.
 * @param $form_state
 *   Form state holding the (AJAX-submitted) form values.
 * @param $checkbox
 *   Name of the issue.kanban checkbox form element.
 * @param $select
 *   Name of the issue.status_term select form element.
 */
function _iq_issue_kanban_ajax_change_helper(&$form, &$form_state, $checkbox, $select) {
  // Dig up the checkbox's current value.
  $kanban = $form[$checkbox][LANGUAGE_NONE]['#default_value'];
  if (isset($form_state['values'][$checkbox][LANGUAGE_NONE][0]['value'])) {
    $kanban = $form_state['values'][$checkbox][LANGUAGE_NONE][0]['value'];
  }
  // Okay, looks like EFQ doesn't want to allow ordering by
  // taxonomy_term_data.weight (by using ->entityOrderBy('weight'), which should
  // be pretty straightforward), so let's load all the vocabulary and filter out
  // what's unneeded.
  $terms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('issue_status')->vid, 0, 2, TRUE);
  $options = array();
  foreach ($terms as $term) {
    if ($term->field_issue_status_kanban[LANGUAGE_NONE][0]['value'] == $kanban) {
      // FIXME: I18n support.
      $options[$term->tid] = str_repeat('-', $term->depth) . $term->name;
    }
  }
  // Allow selecting only those issue statuses that belong to the selected
  // kanban-awareness.
  $form[$select][LANGUAGE_NONE]['#options'] = $options;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function iq_issue_form_issue_node_form_alter(&$form, $form_state) {
  global $user;

  // Init og group reference options.
  $og_group_ref_options = array('_none' => t(' - None - '));
  // Add available projects to the og group reference options.
  $og_group_ref_options += iq_helper_get_available_nodes('project');

  // Set og group reference options.
  $form['og_group_ref'][LANGUAGE_NONE]['#options'] = $og_group_ref_options;
  // Do allow editing the project field upon submitting a new issue.
  if (empty($form['#node']->nid)) {
    $form['og_group_ref']['#access'] = TRUE;
  }

  // Attach ajax callback, to detect the changes of the og group reference field.
  $form['og_group_ref'][LANGUAGE_NONE]['#ajax'] = array(
    'wrapper' => 'field-issue-assigned-to-wrapper',
    'callback' => 'iq_issue_form_issue_node_form_alter_og_group_ref_ajax_callback',
  );

  // Add wrapper to the assigned to field. This is needed by AJAX.
  $form['field_issue_assigned_to']['#prefix'] = '<div id="field-issue-assigned-to-wrapper">';
  $form['field_issue_assigned_to']['#suffix'] = '</div>';

  // Init assigned to options.
  $assigned_to_options = array('_none' => t('Not assigned'));

  // Node add form.
  if (empty($form['nid']['#value'])) {
    // Init project with NULL value, for later check.
    $project = NULL;

    if (!empty($form_state['values']['og_group_ref'][LANGUAGE_NONE][0]['target_id'])) {
      $project = node_load($form_state['values']['og_group_ref'][LANGUAGE_NONE][0]['target_id']);
    }
    else if (isset($_GET['project']) && is_numeric($_GET['project'])) {
      // Try to load the project from URL.
      $node = node_load($_GET['project']);
      if ($node && $node->type == 'project' && array_key_exists($node->nid, $og_group_ref_options)) {
        $project = $node;
      }
    }

    // Check that project available.
    if ($project) {
      // Add available project members to assigned to options.
      $assigned_to_options += iq_helper_get_project_members($project->nid);
      // Set the default value of the og_group_ref field.
      $form['og_group_ref'][LANGUAGE_NONE]['#default_value'][0] = $project->nid;
    }
    else {
      // Disable assigned to field.
      $form['field_issue_assigned_to'][LANGUAGE_NONE]['#disabled'] = TRUE;
    }
  }
  // Node edit form.
  else {
    // Add available project members to assigned to options.
    $assigned_to_options += iq_helper_get_project_members($form['og_group_ref'][LANGUAGE_NONE]['#default_value'][0]);

    // This fieldset is collapsed by default (ie. the new issue node submission
    // form); switch it to collapsible (ie. open by default) when editing the
    // issue node.
    $form['#groups']['group_issue_details']->format_settings['formatter'] = 'collapsible';
  }

  // Set assigned to options.
  $form['field_issue_assigned_to'][LANGUAGE_NONE]['#options'] = $assigned_to_options;

  // Add some AJAX magic: reload available issue statuses upon change of the
  // issue kanban checkbox.
  $form['field_issue_kanban'][LANGUAGE_NONE]['#ajax'] = array(
    'callback' => 'iq_issue_form_issue_node_form_alter_ajax_callback',
    'wrapper' => 'edit-field-issue-status-term',
  );
  _iq_issue_kanban_ajax_change_helper($form, $form_state, 'field_issue_kanban', 'field_issue_status_term');
  // If the $user doesn't have #access to the issue status field, set it to a
  // sane default. The only such thing is the "first" non-kanban issue status
  // (the one with the lowest weight).
  if (empty($form['field_issue_status_term']['#access'])) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', 'issue_status')
      ->fieldCondition('field_issue_status_kanban', 'value', 0)
      ->propertyOrderBy('weight')
      ->execute();
    if (!empty($result['taxonomy_term'])) {
      $term = reset($result['taxonomy_term']);
      $form['field_issue_status_term'][LANGUAGE_NONE]['#default_value'] = $term->tid;
    }
  }
}

/**
 * AJAX callback used in iq_issue_form_issue_node_form_alter().
 */
function iq_issue_form_issue_node_form_alter_og_group_ref_ajax_callback($form, $form_state) {
  return $form['field_issue_assigned_to'];
}

/**
 * Returns the render array only for the issue status term dropdown.
 */
function iq_issue_form_issue_node_form_alter_ajax_callback($form, &$form_state) {
  return $form['field_issue_status_term'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function iq_issue_form_comment_node_issue_form_alter(&$form, &$form_state, $form_id) {
  // Hide all fields on issue nodes' comment edit form, except for comment body
  // and subject.
  if (isset($form['cid']['#value'])) {
    $accessible_elements = array(
      'field_issue_comment_body',
      'actions',
      'form_id',
      'form_build_id',
      'form_token'
    );
    foreach (element_children($form) as $key) {
      if (!in_array($key, $accessible_elements)) {
        $form[$key]['#access'] = FALSE;
      }
    }
  }
  // Comment alter stuff only applies to the comment form appearing on the
  // node form, not to the standalone comment edit form.
  else {
    // As comment_alter does not run any node form alters, esp. it does not run
    // our own one, we have to mimic the same; at least for the assign_to field.
    $form['field_issue_assigned_to'][LANGUAGE_NONE]['#options'] = array('_none' => t('Not assigned')) + iq_helper_get_project_members($form['#node']->og_group_ref[LANGUAGE_NONE][0]['target_id']);

    // Add some AJAX magic: reload available issue statuses upon change of the
    // issue kanban checkbox.
    $form['field_issue_kanban'][LANGUAGE_NONE]['#ajax'] = array(
      'callback' => 'iq_issue_form_comment_node_issue_form_alter_ajax_callback',
      'wrapper' => 'edit-field-issue-status-term',
    );
    _iq_issue_kanban_ajax_change_helper($form, $form_state, 'field_issue_kanban', 'field_issue_status_term');

    // Attachment field(set) should be collapsed by default.
    $form['field_issue_attachments']['#type'] = 'fieldset';
    $form['field_issue_attachments']['#title'] = $form['field_issue_attachments'][LANGUAGE_NONE]['#title'];
    $form['field_issue_attachments'][LANGUAGE_NONE]['#title'] = '';
    $form['field_issue_attachments']['#collapsible'] = TRUE;
    $form['field_issue_attachments']['#collapsed'] = TRUE;
  }
  // Text format guidelines are not yet available, so let's hide them at
  // #after_build time.
  $form['#after_build'][] = 'iq_issue_form_comment_node_issue_form_alter_after_build';
  $form['#submit'][] = 'iq_issue_form_comment_node_issue_form_alter_submit';
  // Hide comment timer status select.
  hide($form['comment_timer']['status']);
}

/**
 * Implements hook_module_implements_alter().
 */
function iq_issue_module_implements_alter(&$implementations, $hook) {
  // We need to act after comment_timer has performed its form modifications.
  if ($hook == 'form_alter') {
    unset($implementations['iq_issue']);
    $implementations['iq_issue'] = FALSE;
  }
}

/**
 * Returns the render array only for the issue status term dropdown.
 */
function iq_issue_form_comment_node_issue_form_alter_ajax_callback($form, &$form_state) {
  return $form['field_issue_status_term'];
}

/**
 * Hides the text format guidelines from (issue) comment forms.
 *
 * @param $form
 *   The form to be changed.
 * @return array
 *   The changed form.
 */
function iq_issue_form_comment_node_issue_form_alter_after_build($form) {
  $form['field_issue_comment_body'][LANGUAGE_NONE][0]['format']['guidelines']['#access'] = FALSE;
  return $form;
}

/**
 * Prevent the pager in the URL.
 */
function iq_issue_form_comment_node_issue_form_alter_submit($form, &$form_state) {
  foreach ($form_state['redirect'] as $key => $value) {
    if (isset($form_state['redirect'][$key]['query']['page'])) {
      unset($form_state['redirect'][$key]['query']['page']);
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function iq_issue_field_formatter_info() {
  $info = array();
  $info['iq_assigned_to'] = array(
    'label' => t('Assigned to'),
    'description' => t('Display the user name of the referenced user entity.'),
    'field types' => array('entityreference'),
    'settings' => array(
      'link' => FALSE,
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function iq_issue_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'iq_assigned_to') {
    $element['link'] = array(
      '#title' => t('Link user name to the user profile'),
      '#type' => 'checkbox',
      '#default_value' => $settings['link'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function iq_issue_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'iq_assigned_to') {
    $summary[] = $settings['link'] ? t('Link user name to the user profile') : t('No link');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function iq_issue_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  foreach ($displays as $display) {
    switch ($display['type']) {
      case 'iq_assigned_to':
        $target_ids = array();

        // Collect every possible entity attached to any of the entities.
        foreach ($entities as $id => $entity) {
          foreach ($items[$id] as $delta => $item) {
            if (isset($item['target_id'])) {
              $target_ids[] = $item['target_id'];
            }
          }
        }

        if ($target_ids) {
          $target_entities = entity_load($field['settings']['target_type'], $target_ids);
        }
        else {
          $target_entities = array();
        }

        // Iterate through the fieldable entities again to attach the loaded data.
        foreach ($entities as $id => $entity) {
          $rekey = FALSE;

          if (!empty($items[$id])) {
            foreach ($items[$id] as $delta => $item) {
              // Check whether the referenced entity could be loaded.
              if (isset($item['target_id']) && isset($target_entities[$item['target_id']])) {
                // Replace the instance value with the term data.
                $items[$id][$delta]['entity'] = $target_entities[$item['target_id']];
                // Check whether the user has access to the referenced entity.
                $items[$id][$delta]['access'] = entity_access('view', $field['settings']['target_type'], $target_entities[$item['target_id']]);
              }
              // Otherwise, unset the instance value, since the entity does not exist.
              else {
                unset($items[$id][$delta]);
                $rekey = TRUE;
              }
            }
          }
          else if ($displays[$id]['type'] == 'iq_assigned_to') {
            $items[$id][] = array(
              'target_id' => NULL,
              'entity' => NULL,
              'access' => TRUE,
            );
          }

          if ($rekey) {
            // Rekey the items array.
            $items[$id] = array_values($items[$id]);
          }
        }
        break;
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function iq_issue_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();

  switch ($display['type']) {
    case 'iq_assigned_to':
      // Rebuild the items list to contain only those with access.
      foreach ($items as $key => $item) {
        if (empty($item['access'])) {
          unset($items[$key]);
        }
      }

      $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);

      if ($field['type'] == 'entityreference' && $field['settings']['target_type'] == 'user') {
        foreach ($items as $delta => $item) {
          if (!empty($item['entity'])) {
            $label = $handler->getLabel($item['entity']);
            // If the link is to be displayed and the entity has a URI, display
            // a link. Note the assignment ($url = ) here is intended to be an
            // assignment.
            if ($display['settings']['link'] && ($uri = entity_uri($field['settings']['target_type'], $item['entity']))) {
              $result[$delta] = array('#markup' => l($label, $uri['path'], $uri['options']));
            }
            else {
              $result[$delta] = array('#markup' => check_plain($label));
            }
          }
          else {
            $result[$delta] = array('#markup' => t('Not assigned'));
          }
        }
      }
      break;
  }

  return $result;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function iq_issue_form_views_exposed_form_alter(&$form, $form_state) {
  // Convert Project textfield to select.
  if (in_array($form['#id'], array('views-exposed-form-issues-page', 'views-exposed-form-issues-panel-pane-2', 'views-exposed-form-issues-panel-pane-4'))) {
    $form['project']['#type'] = 'select';
    $form['project']['#options'] = array('' => 'All') + iq_helper_get_available_nodes('project');
    unset($form['project']['#size']);
  }

  // Convert assigned to field to select.
  if (in_array($form['#id'], array('views-exposed-form-issues-page', 'views-exposed-form-issues-panel-pane-1', 'views-exposed-form-issues-panel-pane-2', 'views-exposed-form-issues-panel-pane-3', 'views-exposed-form-issues-panel-pane-4'))) {
    $form['tag']['#size'] = 15;
    _iq_issue_assigned_to_field_hack($form, $form_state, FALSE);
  }
  if (in_array($form['#id'], array('views-exposed-form-issues-panel-pane-1'))) {
    $form['tag']['#size'] = 15;
    _iq_issue_assigned_to_field_hack($form, $form_state);
  }

  // Changes for 'Comments' view's exposed filters.
  if ($form['#id'] == 'views-exposed-form-comments-page') {
    // Convert project field to select.
    $form['project']['#type'] = 'select';
    $form['project']['#options'] = array('' => t('- any - ')) + iq_helper_get_available_nodes('project');
    unset($form['project']['#size']);

    // Add a description to date field.
    $form['date']['max']['#description'] = t('Eg. %date.', array('%date' => '2013-12-31 23:59'));

    // Change billable field's #options to their proper meaning.
    $form['billable']['#options'][1] = t('No');
    $form['billable']['#options'][0] = t('Yes');

    // Convert author field to select.
    $form['author']['#type'] = 'select';
    $form['author']['#options'] = array('' => t('- any - ')) + iq_helper_get_users_with_common_membership();
    unset($form['author']['#size']);
  }

  _iq_issue_set_active_css_class($form, $form_state);
}

/**
 * Convert assigned to field to select field and populate with users.
 *
 * @param $form
 *   The Views exposed form to be altered.
 * @param $form_state
 *   Form state of that form.
 * @param boolean $by_project
 *   Whether to filter users by project or not.
 */
function _iq_issue_assigned_to_field_hack(&$form, $form_state, $by_project = TRUE) {
  // Get project members for assigned to exposed filter.
  $users = array(
    '' => t('- Any -'),
    0 => t('Not assigned'),
  );
  if ($by_project && isset($form_state['view']->args[0])) {
    $users += iq_helper_get_project_members($form_state['view']->args[0]);
  }
  else {
    $users += iq_helper_get_users_with_common_membership();
  }

  $form['assigned_to']['value'] = array(
    '#type' => 'select',
    '#options' => $users,
  );
  $form['assigned_to']['min'] = FALSE;
  $form['assigned_to']['max'] = FALSE;
  $form['assigned_to_op']['#access'] = FALSE;

  array_unshift($form['#submit'], '_iq_issue_assigned_to_submit');
}

/**
 * Custom submit callback.
 */
function _iq_issue_assigned_to_submit($form, &$form_state) {
  // Set filter operator.
  if ($form_state['values']['assigned_to']['value'] === '0') {
    $form_state['values']['assigned_to_op'] = 'empty';
  }
}

/**
 * Set 'active' css class for active filters.
 */
function _iq_issue_set_active_css_class(&$form, $form_state) {
  foreach ($form_state['input'] as $name => $input) {
    $attr = NULL;

    if ((strpos($form['#id'], 'views-exposed-form-issues') !== FALSE || $form['#id'] == 'views-exposed-form-user-story-issues-panel-pane-1') && $name == 'assigned_to') {
      if (is_array($input) && isset($input['value']) && $input['value'] !== '') {
        $attr = 'active';
      }
    }
    else if (!empty($input)) {
      $attr = 'active';
    }

    if ($attr) {
      if ($name == 'assigned_to') {
        $form[$name]['value']['#attributes'] = array(
          'class' => array($attr),
        );
      }
      else {
        $form[$name]['#attributes'] = array(
          'class' => array($attr),
        );
      }
    }
  }
}

/**
 * Implements hook_enable().
 */
function iq_issue_enable() {
  // This same iq_issue feature itself introduced the issue_status taxonomy
  // vocabulary, so caches needs to be cleared to be able to retrieve its
  // vocabulary ID without errors.
  drupal_flush_all_caches();
  $vid = taxonomy_vocabulary_machine_name_load('issue_status')->vid;
  $term_tids = array();
  $develop_term_tid = 0;

  // Create the kanban issue status terms. We need to save 'Develop' term before
  // we set it as parent term somewhere.
  $terms = array(
    'Backlog',
    'Planned',
    'Develop',
    'Ongoing',
    'Done',
    'Testing',
    'Test OK',
    'Deployable',
    'Live!',
  );
  $weight = -count($terms);
  foreach ($terms as $term) {
    // Create and save the new term object.
    $new_term = new stdClass();
    $new_term->name = $term;
    $new_term->vid = $vid;
    $new_term->weight = $weight++;
    $new_term->field_issue_status_kanban = array(LANGUAGE_NONE => array(0 => array('value' => 1)));
    taxonomy_term_save($new_term);

    // We will need the tids of new terms to be able to modify some of them, so
    // let's store them.
    $term_tids[$term] = $new_term->tid;
    // Save 'Develop' term tid, cause it will be a parent term somewhere.
    if ($new_term->name == 'Develop') {
      $develop_term_tid = $new_term->tid;
    }
  }
  // Modify some previously saved term with their special settings.
  foreach ($term_tids as $term_name => $tid) {
    $term = taxonomy_term_load($tid);
    switch ($term_name) {
      case 'Planned':
        $term->field_issue_status_limit[LANGUAGE_NONE][0]['value'] = 20;
        break;

      case 'Develop':
        $term->field_issue_status_limit[LANGUAGE_NONE][0]['value'] = 11;
        break;

      case 'Ongoing':
        $term->parent = $develop_term_tid;
        break;

      case 'Done':
        $term->parent = $develop_term_tid;
        break;

      case 'Testing':
        $term->field_issue_status_limit[LANGUAGE_NONE][0]['value'] = 4;
        break;
    }
    taxonomy_term_save($term);
  }

  // Create the normal issue status terms.
  $terms = array(
    'New',
    'Preparing quotation',
    'Open',
    'Waiting for feedback',
    'Postponed',
    'Duplicate',
    'Waiting for test',
    'Solved',
    'Ready to invoice',
    'Invoiced',
    'Closed',
  );
  foreach ($terms as $term) {
    // Create and save the new term object.
    $new_term = new stdClass();
    $new_term->name = $term;
    $new_term->vid = $vid;
    $new_term->weight = $weight++;
    // Kanban fields are not mandatory and these terms are not kanban ones, so
    // explicitly no need to store them.
    taxonomy_term_save($new_term);
   }

  // Create Add issue link.
  $item = array(
    'link_path' => 'node/add/issue',
    'link_title' => 'Add issue',
    'menu_name' => 'user-menu',
    'weight' => -49,
  );
  menu_link_save($item);
}

/**
 * Implements hook_disable().
 */
function iq_issue_disable() {
  // Cleaning up Issue status taxonomy vocabulary from installed terms.
  $vid = taxonomy_vocabulary_machine_name_load('issue_status')->vid;
  $terms = taxonomy_get_tree((int) $vid);
  foreach ($terms as $term) {
    taxonomy_term_delete($term->tid);
  }

  // Remove Add issue link.
  menu_link_delete(NULL, 'node/add/issue');
}

/**
 * Implements hook_field_diff_view_alter().
 *
 * @see file_field_diff_view()
 */
function iq_issue_field_diff_view_alter(&$values, &$items, &$context) {
  if ($values && $context['entity_type'] == 'node' && $context['field']['type'] == 'file') {
    $field = $context['field'];
    $instance = $context['instance'];
    $settings = $context['settings'];

    $diff_items = array();
    foreach ($items as $delta => $item) {
      if (isset($item['file'])) {
        $output = array();

        // We populate as much as possible to allow the best flexability in any
        // string overrides.
        $t_args = array();
        foreach ($item as $key => $value) {
          if (is_scalar($value)) {
            $t_args['!' . $key] = $value;
          }
        }
        // Some states do not have the file properties in the item, so put these
        // out of the main file object.
        if (!empty($item['file'])) {
          $file_values = (array) $item['file'];
          foreach ($file_values as $key => $value) {
            if (is_scalar($value) && !isset($t_args['!' . $key])) {
              $t_args['!' . $key] = $value;
            }
          }
        }

        // The only difference from file_field_diff_view() is this single line.
        // Because of the file_create_url() call this cannot be done with a
        // simple string override as file_field_diff_view() suggests.
        $t_args['!filename'] = l($t_args['!filename'], file_create_url($t_args['!uri']));

        $output['file'] = t('File: !filename', $t_args);
        if ($settings['compare_description_field'] && !empty($instance['settings']['description_field'])) {
          if (!empty($item['description'])) {
            $output['description'] = t('Description: !description', $t_args);
          }
        }
        if ($settings['show_id']) {
          $output['fid'] = t('File ID: !fid', $t_args);
        }
        if ($settings['compare_display_field'] && !empty($field['settings']['display_field'])) {
          $output['display'] = $item['display'] ? t('Displayed') : t('Hidden');
        }
        $diff_items[$delta] = implode('; ', $output);
      }
    }
    $values = $diff_items;
  }
}

/**
 * Implements hook_comment_timer_commands_alter().
 */
function iq_issue_comment_timer_commands_alter(&$commands, $comment) {
  // Updating the total time spent on the issue when clicking the comment time
  // status toggler link.
  $node = node_load($comment->nid, NULL, TRUE);
  $time = array(
    '#theme' => 'comment_timer_hhmmss',
    '#seconds' => isset($node->comment_timer) ? $node->comment_timer : 0,
    '#label_display' => 'hidden',
  );
  $commands[] = ajax_command_html('.pane-node-comment-timer .pane-content', drupal_render($time));

  // Rewrite default link text on AJAX.
  $link = comment_timer_status_link_array($comment);
  if ($comment->comment_timer_status == 1) {
    $link['title'] = t('Mark as non-billable');
  }
  else {
    $link['title'] = t('Mark as billable');
  }
  $commands[0]['data'] = l($link['title'], $link['href'], array('attributes' => $link['attributes']));
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function iq_issue_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return "plugins/entityreference/$plugin";
  }
}

/**
 * Implements hook_comment_view_alter().
 */
function iq_issue_comment_view_alter(&$build) {
  // Overwrite comment_timer link texts.
  $comment = $build['#comment'];
  if (isset($build['comment_timer'])) {
    if (comment_access('edit', $comment)) {
      if ($build['comment_timer']['#status'] == 1) {
        $build['links']['comment_timer']['#links']['comment-timer-inclusion']['title'] = t('Mark as non-billable');
      }
      else {
        $build['links']['comment_timer']['#links']['comment-timer-inclusion']['title'] = t('Mark as billable');
      }
    }
    else {
      $markup = '<span class="comment-timer-status comment-timer-status-noedit comment-timer-status-' . $comment->comment_timer_status . '">';
      $markup .= $comment->comment_timer_status ? t('Billable') : t('Non-billable');
      $markup .= '</span>';
      $build['links']['comment_timer']['#links']['comment-timer-inclusion']['title'] = $markup;
    }
  }
}

<?php
/**
 * @file
 * Code for the IssueQ Kanban board feature.
 */

include_once 'iq_kanban_board.features.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function iq_kanban_board_ctools_plugin_directory($owner, $plugin_type) {
  if (($owner == 'ctools') || ($owner == 'panels')) {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_menu().
 */
function iq_kanban_board_menu() {
  $items = array();
  $items['issueq/kanban-board/update'] = array(
    'page callback' => '_iq_kanban_board_update_ajax',
    'access callback' => '_iq_kanban_board_update_ajax_access',
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function iq_kanban_board_theme() {
  $return = array();
  $return['iq_kanban_board_item'] = array(
    'variables' => array(
      'title' => '',
      'project' => '',
      'estimate' => NULL,
      'assigned_to' => NULL,
    ),
  );
  return $return;
}

/**
 * Returns HTML for a kanban board item.
 *
 * @param $variables
 *   An associative array containing:
 *   - title: A string to be displayed as item title.
 *   - project: A string to be displayed as the item's project.
 *   - estimate: A string to be displayed as the item's ETA, if any.
 *   - assigned_to: A string to be displayed as the item's assignee, if any.
 *
 * @ingroup themeable
 */
function theme_iq_kanban_board_item($variables) {
  $output = '<div class="node node-issue">';
  $output .= '<h2>' . $variables['title'] . '</h2>';
  $output .= '<div class="content clearfix">';
  $output .= '<div class="field field-name-og-group-ref field-type-entityreference field-label-hidden">';
  $output .= '<div class="field-items"><div class="field-item even">' . $variables['project'] . '</div></div>';
  $output .= '</div>';
  if (isset($variables['estimate'])) {
    // FIXME: Would be better to reuse field instance settings, or even use
    // field_view_field('node', $some_node, 'field_issue_estimate', 'default').
    $output .= '<div class="field field-name-field-issue-estimate field-type-number-float field-label-inline clearfix">';
    $output .= '<div class="field-label">' . t('Estimate') . ': </div>';
    $output .= '<div class="field-items"><div class="field-item even">' . $variables['estimate'] . t(' h') . '</div></div>';
    $output .= '</div>';
  }
  if (isset($variables['assigned_to'])) {
    $output .= '<div class="field field-name-field-issue-assigned-to field-type-entityreference field-label-hidden">';
    $output .= '<div class="field-items"><div class="field-item even">' . $variables['assigned_to'] . '</div></div>';
    $output .= '</div>';
  }
  $output .= '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Helper function to decide if the issue status is already full or not.
 *
 * This function performs DB queries so any unsaved nodes will not count.
 *
 * @param object $term
 *   A fully-loaded taxonomy_term object from the issue_status vocabulary.
 * @param int $project
 *   A project's {node}.nid.
 * @param int $nid
 *   The issue {node}.nid is being changed or 0 in case of submitting a new
 *   issue node.
 *
 * @return bool
 *   FALSE if the number of issues with the given issue status is less than the
 *   limit in the given project, TRUE otherwise.
 */
function _iq_kanban_board_is_status_full($term, $project, $nid = 0) {
  $limit = field_get_items('taxonomy_term', $term, 'field_issue_status_limit');

  $parents = taxonomy_get_parents($term->tid);
  // This is an first level term.
  if (empty($parents)) {
    if (!$limit) {
      return FALSE;
    }
    else {
      $limit = $limit[0]['value'];
      $tid = $term->tid;
    }
  }
  // This is a child term.
  else {
    // If child limit is set, it overrides parent limit.
    if ($limit) {
      $limit = $limit[0]['value'];
      $tid = $term->tid;
    }
    else {
      $parent = taxonomy_term_load(reset($parents)->tid);
      $limit = field_get_items('taxonomy_term', $parent, 'field_issue_status_limit');
      // If neither the term's nor its parent's limit is set then we can have
      // unlimited issues...
      if (!$limit) {
        return FALSE;
      }
      // ...else get the total of all the children.
      $limit = $limit[0]['value'];
      $vocab = taxonomy_vocabulary_machine_name_load('issue_status');
      // Assume that kanban statuses have only kanban children.
      $tree = taxonomy_get_tree($vocab->vid, $parent->tid, 2);
      $tid = array();
      foreach ($tree as $child) {
        $tid[] = $child->tid;
      }
    }
  }
  if ($limit == 0) {
    return TRUE;
  }

  // Cannot use EFQ here as we want all the issues, not just the ones the
  // current user has access to.
  $query = db_select('field_data_field_issue_status_term', 'fdf_ist')
    ->fields('fdf_ist', array('field_issue_status_term_tid'))
    ->condition('fdf_ist.bundle', 'issue')
    ->condition('fdf_ist.entity_type', 'node');
  if ($nid) {
    $query->condition('fdf_ist.entity_id', $nid, '<>');
  }
  if (is_array($tid)) {
    $query->condition('fdf_ist.field_issue_status_term_tid', $tid, 'IN');
  }
  else {
    $query->condition('fdf_ist.field_issue_status_term_tid', $tid);
  }
  // Here fdf_ist.entity_id is the issue {node}.nid.
  $om = $query->innerJoin('og_membership', 'og_m', '%alias.entity_type = :node AND %alias.etid = fdf_ist.entity_id', array(':node' => 'node'));
  $query->condition($om . '.group_type', 'node');
  $query->condition($om . '.gid', $project);
  $result = $query->countQuery()
    ->execute()
    ->fetchField();
  return $result >= $limit;
}

/**
 * Stores AJAX node changes and posts a comment about those changes.
 *
 * @param $node
 *   Node object with not-yet-stored changes.
 */
function _iq_kanban_board_update_ajax_store_changes($node) {
  global $user;
  // Save the node and create revision.
  $old_vid = $node->vid;
  $node->revision = TRUE;
  // Disable node updated notifications that caused by kanban board updates.
  // This disabling is unconditional: there may be other modules than
  // notifications_content that wants these notifications be disabled; reusing
  // the same key seems to be a non-issue here as it won't get stored anywhere.
  $node->notifications_content_disable = TRUE;
  node_save($node);
  // Create a comment with that revision.
  $comment = (object) array(
    'nid' => $node->nid,
    'uid' => $user->uid,
    'subject' => t('No subject'),
    'language' => LANGUAGE_NONE,
    'field_issue_comment_body' => array(LANGUAGE_NONE => array(0 => array(
      'value' => t('Kanban board modification.'),
      'format' => 'plain_text',
    ))),
  );
  comment_save($comment);
  // Oh, and store the revision ID's along with that comment.
  $comment_alter = array(
    'old_vid' => $old_vid,
    'new_vid' => $node->vid,
    'cid' => $comment->cid,
  );
  drupal_write_record('comment_alter', $comment_alter);
}

/**
 * Ajax callback to update user story node information based on drag&drop.
 */
function _iq_kanban_board_update_ajax() {
  $nid = &$_POST['nid'];
  $tid = &$_POST['tid'];
  $order = &$_POST['order'];

  if (is_numeric($nid) && is_numeric($tid)) {
    $node = node_load($nid);
    $project = $node->og_group_ref[LANGUAGE_NONE][0]['target_id'];
    $term = taxonomy_term_load($tid);

    if ($term && $term->vocabulary_machine_name == 'issue_status' && !_iq_kanban_board_is_status_full($term, $project, $nid)) {
      $nodes = node_load_multiple($order);
      $num = count($nodes);
      foreach ($nodes as $node) {
        // Don't store changes if there is none, this would be confusing in the
        // history shown by the comments.
        $change = FALSE;
        // Change the status only of the now-dragged node.
        if ($node->nid == $nid && $node->field_issue_status_term[LANGUAGE_NONE][0]['tid'] != $tid) {
          $node->field_issue_status_term[LANGUAGE_NONE][0]['tid'] = $tid;
          $change = TRUE;
        }
        // Only reorder the nodes if there are more than one of them.
        if (count($order) > 1 && $node->field_issue_business_value[LANGUAGE_NONE][0]['value'] != $num) {
          $node->field_issue_business_value[LANGUAGE_NONE][0]['value'] = $num;
          $change = TRUE;
        }
        // Store both changes in the same revision (and comment).
        if ($change) {
          _iq_kanban_board_update_ajax_store_changes($node);
        }
        $num--;
      }
      return array(
        'status' => TRUE,
      );
    }
    else {
      return array(
        'status' => FALSE,
      );
    }
  }
  // Do not reply with anything useful for invalid input.
}

/**
 * Access callback for the ajax update path.
 */
function _iq_kanban_board_update_ajax_access() {
  // First of all, deny access for anonymous users.
  if (!user_is_logged_in() || !isset($_POST['nid']) || !isset($_POST['tid']) || !isset($_POST['order'])) {
    return FALSE;
  }

  $nid = &$_POST['nid'];
  $tid = &$_POST['tid'];
  $order = &$_POST['order'];

  // Deny access for invalid input.
  if (!is_numeric($nid) || !is_numeric($tid)) {
    return FALSE;
  }
  if (!is_array($order) || count($order) < 1) {
    return FALSE;
  }

  // Deny access for invalid taxonomy term (issue status).
  $term = taxonomy_term_load($tid);
  if (!$term || $term->vocabulary_machine_name != 'issue_status') {
    return FALSE;
  }
  // Deny access for non-kanban-board-statuses.
  $kanban = field_get_items('taxonomy_term', $term, 'field_issue_status_kanban');
  if (!$kanban) {
    return FALSE;
  }

  // Deny access for invalid nodes (issue).
  $node = node_load($nid);
  $field_info = field_info_field('field_issue_business_value');
  if (!$node || $node->type != 'issue' || !field_access('edit', $field_info, 'node', $node)) {
    return FALSE;
  }
  $nodes = node_load_multiple($order); // Let's hope it's cached.
  foreach ($nodes as $node) {
    if (!$node || $node->type != 'issue' || !field_access('edit', $field_info, 'node', $node)) {
      return FALSE;
    }
  }

  // Grant access to customers only for the 'backlog' column. IOW, if $user has
  // the 'customer' OG role in the project of the currently dragged node, then
  // s/he is allowed to do this reordering only if s/he is doing this regarding
  // the lowest-weighted kanban issue status taxonomy term, by denying access in
  // the other columns (IOW regarding other terms).
  $project = $node->og_group_ref[LANGUAGE_NONE][0]['target_id'];
  $og_roles = array_flip(og_get_user_roles('node', $project));
  if (isset($og_roles['customer'])) {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', 'issue_status')
      ->propertyCondition('vid', taxonomy_vocabulary_machine_name_load('issue_status')->vid)
      ->fieldCondition('field_issue_status_kanban', 'value', 1)
      ->propertyOrderBy('weight')
      ->range(0, 1)
      ->execute();
    if (!empty($result['taxonomy_term'])) {
      $term = reset($result['taxonomy_term']);
      if ($term->tid != $tid) {
        return FALSE;
      }
    }
  }

  // Grant access if everything seems to be OK.
  return TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function iq_kanban_board_form_comment_node_issue_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'iq_kanban_board_form_comment_node_issue_form_alter_validate';
}

/**
 * Additional validator for comment_node_issue_form, prevents over-limit issues.
 */
function iq_kanban_board_form_comment_node_issue_form_alter_validate($form, &$form_state) {
  // On comment editing this is not set.
  if (isset($form_state['values']['field_issue_status_term'])) {
    $term = taxonomy_term_load($form_state['values']['field_issue_status_term'][LANGUAGE_NONE][0]['tid']);
    $kanban = field_get_items('taxonomy_term', $term, 'field_issue_status_kanban');
    // Only kanban statuses may have limit.
    if ($kanban) {
      $node = node_load($form_state['values']['nid']);
      $project = $node->og_group_ref[LANGUAGE_NONE][0]['target_id'];
      if (_iq_kanban_board_is_status_full($term, $project, $node->nid)) {
        form_set_error('field_issue_status_term][und', t('Issue status would exceed its limit, select another status.'));
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function iq_kanban_board_form_issue_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'iq_kanban_board_form_issue_node_form_alter_validate';
}

/**
 * Additional validator for issue_node_form, prevents over-limit issues.
 */
function iq_kanban_board_form_issue_node_form_alter_validate($form, &$form_state) {
  if ($project = $form_state['values']['og_group_ref'][LANGUAGE_NONE][0]['target_id']) {
    $term = taxonomy_term_load($form_state['values']['field_issue_status_term'][LANGUAGE_NONE][0]['tid']);
    $kanban = field_get_items('taxonomy_term', $term, 'field_issue_status_kanban');
    // Only kanban statuses may have limit.
    if ($kanban && _iq_kanban_board_is_status_full($term, $project, $form_state['values']['nid'])) {
      form_set_error('field_issue_status_term][und', t('Issue status would exceed its limit, select another status.'));
    }
  }
}
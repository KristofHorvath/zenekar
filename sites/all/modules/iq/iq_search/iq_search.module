<?php
/**
 * @file
 * Code for the IssueQ Search feature.
 */

include_once 'iq_search.features.inc';

/**
 * Hide real filters on exposed forms.
 *
 * Implements hook_form_FORM_ID_alter().
 */
function iq_search_form_views_exposed_form_alter(&$form, $form_state) {
  if ($form['#id'] == 'views-exposed-form-search-multi-page') {
    if (isset($form['search_api_multi_author'])) {
      $form['search_api_multi_author']['#type'] = 'hidden';
      $form['#info']['filter-search_api_multi_author']['label'] = '';
    }
    if (isset($form['search_api_multi_project'])) {
      $form['search_api_multi_project']['#type'] = 'hidden';
      $form['#info']['filter-search_api_multi_project']['label'] = '';
    }
    if (isset($form['search_api_multi_node_type'])) {
      $form['search_api_multi_node_type']['#type'] = 'hidden';
      $form['#info']['filter-search_api_multi_node_type']['label'] = '';
    }
  }
}

/**
 * Implements hook_views_post_render().
 */
function iq_search_views_post_render($view, &$output) {
  // Add our custom form to search api multi search view page.
  if ($view->name == 'search_multi' && $view->current_display == 'page') {
    $fake_form = drupal_get_form('fake_views_exposed_search_multi_form', $view);
    $output = drupal_render($fake_form) . $output;
  }
}

/**
 * This custom form will be used in Search API Multi search view page
 * instead of the basic dummy exposed form.
 * This will create a select list for each filters and fill them with
 * options from Search API Facet API results.
 *
 * @param $view
 *  A views view object.
 */
function fake_views_exposed_search_multi_form($form, $form_state, $view) {

  // Get all form elements from original exposed forms.
  $form_state = array(
    'view' => $view,
    'display' => $view->display['default'],
    'exposed_form_plugin' => $view->display['default']->display_options['exposed_form'],
  );
  $original_form = drupal_build_form('views_exposed_form', $form_state);

  // Get Facet API result for current search.
  $sapi_result = method_exists($view->query, 'getSearchApiResults') ? $view->query->getSearchApiResults() : array();

  // Check if Facet API has result this search.
  if (isset($sapi_result['search_api_facets'])) {
    $facetapi_multi_result = _iq_search_preprocess_search_api_result($sapi_result['search_api_facets']);

    // Create our custom Author filter.
    if (isset($original_form['search_api_multi_author']) && isset($facetapi_multi_result['author'])) {

      $search_table = array(
        'table' => 'users',
        'fields' => array('name'),
        'unique_id' => 'uid',
      );

      $author_options = _iq_search_generate_options($facetapi_multi_result['author'], $search_table);

      $form['search_api_multi_author'] = array(
        '#type' => 'select',
        '#title' => t('Author'),
        '#options' => array('All' => t('- Any -')) + $author_options,
        '#default_value' => isset($form_state['input']['search_api_multi_author']) ? $form_state['input']['search_api_multi_author'] : $original_form['search_api_multi_author']['#value'],
      );
    }

    // Create our custom Project filter.
    if (isset($original_form['search_api_multi_project']) && isset($facetapi_multi_result['og_group_ref'])) {

      $search_table = array(
        'table' => 'node',
        'fields' => array('title'),
        'unique_id' => 'nid',
      );

      $project_options = _iq_search_generate_options($facetapi_multi_result['og_group_ref'], $search_table);

      $form['search_api_multi_project'] = array(
        '#type' => 'select',
        '#title' => t('Project'),
        '#options' => array('All' => t('- Any -')) + $project_options,
        '#default_value' => isset($form_state['input']['search_api_multi_project']) ? $form_state['input']['search_api_multi_project'] : $original_form['search_api_multi_project']['#value'],
      );
    }

    // Create our custom Node type filter.
    if (isset($original_form['search_api_multi_node_type']) && isset($facetapi_multi_result['type'])) {

      $search_table = array(
        'table' => 'node_type',
        'fields' => array('name'),
        'unique_id' => 'type',
      );

      $node_type_options = _iq_search_generate_options($facetapi_multi_result['type'], $search_table);

      $form['search_api_multi_node_type'] = array(
        '#type' => 'select',
        '#title' => t('Node type'),
        '#options' => array('All' => t('- Any -')) + $node_type_options,
        '#default_value' => isset($form_state['input']['search_api_multi_node_type']) ? $form_state['input']['search_api_multi_node_type'] : $original_form['search_api_multi_node_type']['#value'],
      );
    }

    $form['#attached']['js'] = array(
      drupal_get_path('module', 'iq_search') . '/js/fake_exposed_filters.js',
    );
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'iq_search') . '/css/fake_exposed_filters.css',
    );
  }

  return $form;
}

/**
 * Prepossess Search API Facet API (S.A.F.A.) result array.
 * This array contains both comment index and content index fields results,
 * but separated. We need to sum up the coherent arrays.
 *
 * @param $result
 *  S.A.F.A result array.
 * @return array
 *  A modified result array. 'node:' prefixes removed and coherent arrays merged.
 *  After that the coherent indexes merged too to reduce duplicate indexes.
 *  (Counts were also summarized in this indexes.)
 */
function _iq_search_preprocess_search_api_result($result) {
  $keys = array_keys($result);
  // Cleaning up 'node:' prefixes and ':uid' suffix from keys.
  // This helps to find out which arrays are coherent and merge them.
  // example: node_og_group_ref and og_group_ref are coherent arrays, their data should be merged in next step!
  foreach ($keys as $key) {
    $cleankey = str_replace(array('node:', ':uid'), '', $key);
    if ($cleankey == $key) {
      continue;
    }
    else {
      if (isset($result[$cleankey])) {
        $result[$cleankey] = array_merge($result[$cleankey], $result[$key]);
        unset($result[$key]);
      }
      else {
        $result[$cleankey] = $result[$key];
        unset($result[$key]);
      }
    }
  }
  // Merge coherent array indexes into one array to reduce duplicates.
  // Facet API count information will be summarized too.
  $concated_result = array();
  $keys = array_keys($result);
  foreach ($keys as $key) {
    foreach ($result[$key] as $data) {
      $concated_result[$key][$data['filter']] = array(
        'filter' => str_replace('"', '', $data['filter']),
        'count' => isset($concated_result[$key][$data['filter']]['count']) ? $concated_result[$key][$data['filter']]['count'] + $data['count'] : $data['count'],
      );
    }
  }

  return $concated_result;
}

/**
 * Generate an options array for selects from one preprocessed S.A.F.A result array.
 *
 * @param array $fields
 *  The preprocessed (merged and summarized) S.A.F.A result array.
 * @param array $search_table
 *  The base table in database, where we get the human readable name/title of one option.
 * @return array
 *  Return a proper options array for selects.
 */
function _iq_search_generate_options($fields = array(), $search_table = array()) {
  $options = array();

  foreach ($fields as $field) {
    $query = db_select($search_table['table'])
      ->fields($search_table['table'], $search_table['fields'])
      ->condition($search_table['unique_id'], $field['filter']);
    if (isset($search_table['conditions'])) {
      foreach ($search_table['conditions'] as $condition) {
        $query->condition($condition['field'], $condition['value'], '=');
      }
    }
    $result = $query->execute()->fetchField();
    $options[$field['filter']] = $result . ' (' . $field['count'] . ')';
  }

  return $options;
}
